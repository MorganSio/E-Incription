{% extends 'base.html.twig' %}

{% block title %}Ajout de fichier BTS{% endblock %}

{% block body %}
    {% for flash_error in app.flashes('verify_email_error') %}
        <div class="alert alert-danger" role="alert">{{ flash_error }}</div>
    {% endfor %}

    <main role="main" id="content">
        <form method="post" action="{{ path('fichier-upload') }}" enctype="multipart/form-data">
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">1 photo d'identité</h3>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <p class="fr-card__desc">Attention ! Il faudra tout de même rapportés 2 photos à la rentrée.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                    <input class="fr-upload" type="file" id="photo-upload" name="photo-upload[]">
                            </p>
                            <div id="photo-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">La notification de bourse</h3>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                <input class="fr-upload" type="file" id="bourse-upload" name="bourse-upload[]">
                            </p>
                            <div id="bourse-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">L'assurance scolaire</h3>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                <input class="fr-upload" type="file" id="assurance-upload" name="assurance-upload[]">
                            </p>
                            <div id="assurance-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">Certificat de la JDC</h3>
                        <p class="fr-card__desc">La photocopie du certificat de la participation à la journée défense et citoyenneté (JDC) obligatoire pour l’inscription aux épreuves de BTS pour les jeunes de nationalité française.</p>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                <input class="fr-upload" type="file" id="JDC-upload" name="JDC-upload[]">
                            </p>
                            <div id="JDC-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">Attestation d'identité</h3>
                        <p class="fr-card__desc">une attestation de votre identité (copie recto-verso d’une pièce d’identité ou copie du livret de famille).</p>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                <input class="fr-upload" type="file" multiple id="identite-upload" name="identite-upload[]">
                            </p>
                            <div id="identite-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download"> 
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">Attestation de réussite au baccalauréat</h3>
                        <p class="fr-card__desc">une attestation de votre réussite au baccalauréat (photocopie de votre relevé de notes).</p>
                        <p class="fr-card__desc">Taille maximale : 100 Mo. Formats supportés : jpg, png, pdf. Plusieurs fichiers possibles.</p>
                        <div class="fr-card__end">
                            <p class="fr-card__detail">
                                <input class="fr-upload" type="file" id="bac-upload" name="bac-upload[]">
                            </p>
                            <div id="bac-upload-error" class="fr-upload-group fr-upload-group--error" style="display: none;">
                                <p class="fr-error-text">Format de fichier non supporté</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fr-card fr-enlarge-link fr-card--download">
                <div class="fr-card__body">
                    <div class="fr-card__content">
                        <h3 class="fr-card__title">Signature électronique du représentant légal</h3>
                        <p class="fr-card__desc">Veuillez signer ci-dessous (élève ou parents considérés comme responsables légaux), <strong>SIGNATURE À FAIRE SUR PC</strong> :</p>
                    </div>
                    <div class="fr-card__content">
                        
                        <div class="signature-container">
                            <canvas id="signature-pad" style="border:0.5px solid #000; width:100%; height:600px;"></canvas>
                        </div>

                        <div class="buttons" style="margin-top:10px;">
                            <button type="button" id="clear-signature" class="fr-btn">Effacer</button>
                            <button type="button" id="save-signature" class="fr-btn">Valider la signature</button>
                        </div>

                        <input type="hidden" name="signature" id="signature-input">
                    </div>
                </div>
            </div>
            <button class="fr-btn" type="submit">Envoyer</button>
        </form>
    </main>
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const allowedFormats = ["image/jpeg", "image/png", "application/pdf"];

        function validateFile(inputId, errorId) {
            const input = document.getElementById(inputId);
            const errorDiv = document.getElementById(errorId);

            if (!input) return;

            input.addEventListener("change", function () {
                let files = input.files;
                let isValid = true;

                for (let i = 0; i < files.length; i++) {
                    if (!allowedFormats.includes(files[i].type)) {
                        isValid = false;
                        break;
                    }
                }
                errorDiv.style.display = isValid ? "none" : "block";
            });
        }

        validateFile("photo-upload", "photo-upload-error");
        validateFile("bourse-upload", "bourse-upload-error");
        validateFile("assurance-upload", "assurance-upload-error");
        validateFile("JDC-upload", "JDC-upload-error");
        validateFile("identite-upload", "identite-upload-error");
        validateFile("bac-upload", "bac-upload-error");
        validateFile("rib-upload", "rib-upload-error");

        const canvas = document.getElementById("signature-pad");
        const ctx = canvas.getContext("2d");
        const clearButton = document.getElementById("clear-signature");
        const saveButton = document.getElementById("save-signature");
        const signatureInput = document.getElementById("signature-input");
        const form = document.getElementById("upload-form");

        function resizeCanvas() {
            const rect = canvas.getBoundingClientRect();
            const devicePixelRatio = window.devicePixelRatio || 1;

            const oldImage = ctx.getImageData(0, 0, canvas.width, canvas.height);

            canvas.width = rect.width * devicePixelRatio;
            canvas.height = rect.height * devicePixelRatio;
            canvas.style.width = `${rect.width}px`;
            canvas.style.height = `${rect.height}px`;

            ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform avant de rescaler
            ctx.scale(devicePixelRatio, devicePixelRatio);
            ctx.lineWidth = 2;
            ctx.lineCap = "round";
            ctx.lineJoin = "round";
            ctx.strokeStyle = "#000";

            ctx.putImageData(oldImage, 0, 0);
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            signatureInput.value = "";
        }

        function getPosition(event) {
            const rect = canvas.getBoundingClientRect();
            const scaleX = canvas.width / rect.width;
            const scaleY = canvas.height / rect.height;
            let clientX, clientY;
            if (event.touches) {
                clientX = event.touches[0].clientX;
                clientY = event.touches[0].clientY;
            } else {
                clientX = event.clientX;
                clientY = event.clientY;
            }
            return {
                x: (clientX - rect.left) * scaleX,
                y: (clientY - rect.top) * scaleY
            };
        }

        let drawing = false;
        let lastX = 0, lastY = 0;

        function startDrawing(event) {
            event.preventDefault();
            drawing = true;
            const pos = getPosition(event);
            lastX = pos.x;
            lastY = pos.y;
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
        }

        function draw(event) {
            if (!drawing) return;
            event.preventDefault();
            const pos = getPosition(event);
            ctx.lineTo(pos.x, pos.y);
            ctx.stroke();
            lastX = pos.x;
            lastY = pos.y;
        }

        function stopDrawing() {
            if (!drawing) return;
            drawing = false;
            ctx.closePath();
            signatureInput.value = canvas.toDataURL("image/png");
        }

        function saveSignature() {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            let isEmpty = true;

            for (let i = 0; i < data.length; i += 4) {
                if (data[i + 3] > 0) { // alpha channel > 0
                    isEmpty = false;
                    break;
                }
            }

            if (isEmpty) {
                alert("Veuillez signer avant de valider.");
                return;
            }
            signatureInput.value = canvas.toDataURL("image/png");
            alert("Signature enregistrée !");
        }

        canvas.addEventListener("mousedown", startDrawing);
        canvas.addEventListener("mousemove", draw);
        canvas.addEventListener("mouseup", stopDrawing);
        canvas.addEventListener("mouseleave", stopDrawing);
        canvas.addEventListener("touchstart", startDrawing, { passive: false });
        canvas.addEventListener("touchmove", draw, { passive: false });
        canvas.addEventListener("touchend", stopDrawing);
        canvas.addEventListener("touchcancel", stopDrawing);

        clearButton.addEventListener("click", clearCanvas);
        saveButton.addEventListener("click", saveSignature);

        window.addEventListener("resize", resizeCanvas);

        // Vérification de la signature avant soumission
        form.addEventListener("submit", function(e) {
            if (!signatureInput.value) {
                e.preventDefault();
                alert("Veuillez signer avant d'envoyer le formulaire.");
            }
        });

        // Init
        resizeCanvas();
        clearCanvas();
    });
</script>
{% endblock %}